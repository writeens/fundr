{"version":3,"sources":["TransferForm.js","TransferModal.js","DirectForm.js","Fundr.js","App.js","serviceWorker.js","index.js"],"names":["axios_pay","axios","create","baseURL","headers","Authorization","concat","process","SECRET_API","TransferForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","accountNo","banks","bankCode","amount","accountName","reason","isVerifying","handleAccount","bind","assertThisInitialized","handleSelect","handleAmount","handleReason","handleSubmit","_this2","get","then","setState","isLoading","status","allBanks","data","map","bank","code","name","id","type","evt","target","value","_this3","defineProperty","length","params","account_number","bank_code","res","account_name","catch","err","alert","preventDefault","_this$state","createRecipient","react_default","a","createElement","onSubmit","className","htmlFor","onChange","disabled","key","success","required","maxLength","defaultValue","Component","TransferModal","otp","handleChange","handleClose","handleClear","finalizeTransfer","closeModal","clear","version","xmlns","width","height","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","onClick","recipient","placeholder","DirectForm","recipients","recipientCode","defaultSelect","allRecipients","selectedRecipient","filter","recipient_code","st","details","bank_name","accountNumber","update","Fundr","directTransfer","isTransferring","transferCode","initiateTransfer","handleDirectTransfer","handleNewTransfer","updateFundr","post","rc_code","source","tf_code","transfer_code","_this4","style","backgroundColor","color","src_DirectForm_0","src_TransferForm_0","src_TransferModal_0","App","src_Fundr_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8344f45.chunk.js","sourcesContent":["/**\r\n * This component handles a new transfer being made to a recipient\r\n * who is yet to be registered.\r\n */\r\n\r\n // Imports\r\nimport React, { Component } from 'react'\r\nimport axios from \"axios\";\r\nimport \"./TransferForm.css\";\r\n\r\n/**\r\n * create instance of axios library with authentication\r\n */\r\nlet axios_pay = axios.create({\r\n    baseURL: \"https://api.paystack.co\",\r\n    headers: {\"Authorization\": `Bearer ${process.env.SECRET_API}`}\r\n})\r\n\r\n// Component class \r\nclass TransferForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        /**\r\n         * Initial state set and all methods used are bound\r\n         */\r\n        this.state={accountNo:\"\", banks:[], bankCode:\"\", amount:\"\", accountName:\"\", reason:\"\", isVerifying:false}\r\n        this.handleAccount = this.handleAccount.bind(this);\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.handleAmount = this.handleAmount.bind(this);\r\n        this.handleReason = this.handleReason.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Upon mounting,\r\n     * Retrieve the list of banks and their associated bank codes\r\n     */\r\n    componentDidMount(){\r\n        //Using the Banks API\r\n        axios_pay.get(\"/bank\").then(banks => {\r\n            this.setState({isLoading: true})\r\n            if(banks.status === 200){\r\n                let allBanks = banks.data.data.map(bank => {\r\n                    return {code: bank.code, name: bank.name, id: bank.id, type: bank.type}\r\n                })\r\n                this.setState({banks : allBanks})\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * This handles the selection of a bank from the list,\r\n     * it updates state accordingly\r\n     */\r\n    handleSelect(evt){\r\n        this.setState({\r\n            bankCode: evt.target.value,\r\n            accountNo: \"\",\r\n            accountName:\"\"\r\n        })\r\n    }\r\n    /**\r\n     * Update Amount and Reason for Transfer\r\n     * \r\n     */\r\n    handleAmount(evt){\r\n        this.setState({amount: evt.target.value})\r\n    }\r\n    handleReason(evt){\r\n        this.setState({reason: evt.target.value})\r\n    }\r\n\r\n    /**\r\n     *  Get Account Number from User and Verify using the Paystack Resolve Phone Number API \r\n     *  Retrieve the account name and update state accordingly\r\n     * \r\n     */\r\n    handleAccount(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        }, ()=> {\r\n            if(this.state.accountNo.length === 10){\r\n                this.setState({isVerifying: true}, () => {\r\n                    axios_pay.get(\"/bank/resolve\", {\r\n                        params: {account_number: this.state.accountNo, \r\n                            bank_code: this.state.bankCode }\r\n                    }).then(res => {\r\n                        let name = res.data.data.account_name\r\n                        this.setState({isVerifying: false}, () =>{\r\n                            this.setState({accountName: name})\r\n                        })\r\n                    }).catch(err => {\r\n                        if(err){\r\n                            alert(\"Please ensure you are transferring to the proper bank\")\r\n                            this.setState({bankCode:\"\", accountNo:\"\", isVerifying:false})\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This handles the form submit event and sends all details to the parent Component \r\n     *  \r\n     */\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        const {bankCode, accountName, accountNo, amount, reason} = this.state\r\n        this.props.createRecipient(bankCode, accountName, accountNo, amount, reason)\r\n    }\r\n\r\n    clear(){\r\n        this.setState({\r\n            accountNo:\"\", \r\n                bankCode:\"\", \r\n                amount:\"\", \r\n                accountName:\"\", \r\n                reason:\"\", \r\n                isVerifying:false\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Renders <TransferForm /> \r\n     */\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit} className=\"TransferForm\">\r\n                <div>\r\n                    <label htmlFor=\"bankInfo\">Bank: </label>\r\n                    <select value={this.state.bankCode} onChange={this.handleSelect}>\r\n                        <option disabled value=\"\">Select a Bank</option>\r\n                        {this.state.banks.map(bank => <option key={bank.id} value={bank.code}>{bank.name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"accountNo\">Account No: </label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"accountNo\"\r\n                        id=\"accountNo\"\r\n                        value={(this.state.success) ? \"\" : this.state.accountNo}\r\n                        onChange={this.handleAccount}\r\n                        required\r\n                        maxLength={10}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"accountName\">Account Name: </label>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"accountName\"\r\n                        name=\"accountName\"\r\n                        defaultValue={this.state.accountName}\r\n                        disabled\r\n                    />\r\n                    {(this.state.isVerifying) ? \r\n                    <div className=\"TransferForm-ac-loader\">\r\n                        <i className=\"fas fa-spinner fa-spin\"></i>\r\n                    </div> : null}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"amount\">Amount: </label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"amount\"\r\n                        id=\"amount\"\r\n                        value={this.state.amount}\r\n                        onChange={this.handleAmount}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"reason\">Description</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"reason\"\r\n                        name=\"reason\"\r\n                        value={this.state.reason}\r\n                        onChange={this.handleReason}\r\n                        required\r\n                        maxLength={30}\r\n                    />\r\n                </div>\r\n                <div id=\"TransferForm-button\">\r\n                    <button>Continue</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransferForm;","import React, { Component } from 'react';\r\nimport \"./TransferModal.css\";\r\n\r\nclass TransferModal extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {otp: \"\"}\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({otp: evt.target.value})\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault()\r\n        this.props.finalizeTransfer(this.state.otp)\r\n    }\r\n    handleClose(){\r\n        this.props.closeModal()\r\n    }\r\n    handleClear(){\r\n        this.props.clear()\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrapper\">\r\n                    {(this.props.success) ?\r\n                        <div className=\"Modal\">\r\n                            <div className=\"Modal-success\">Success</div>\r\n                            <div className=\"Modal-success-details\">\r\n                                <svg\r\n                                    version=\"1.1\"\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"40\"\r\n                                    height=\"50\"\r\n                                    viewBox=\"0 0 80 80\">\r\n                                    <title>tick-mark</title>\r\n                                    <path\r\n                                    className=\"path-circle\"\r\n                                    stroke=\"#0c243b\"\r\n                                    strokeWidth=\"3\"\r\n                                    fill=\"none\"\r\n                                    strokeLinecap=\"butt\"\r\n                                    strokeLinejoin=\"butt\"\r\n                                    d=\"M 75,40 A 35,35   0 0 1 40,75  M40,75 A 35,35   0 0 1 5,40  M5,40 A 35,35   0 0 1 40,5  M40,5 A 35,35   0 0 1 75,40\"/>\r\n                                    <path\r\n                                    className=\"path-tick\"\r\n                                    stroke=\"#0c243b\"\r\n                                    strokeWidth=\"3\"\r\n                                    fill=\"none\"\r\n                                    strokeLinecap=\"butt\"\r\n                                    strokeLinejoin=\"butt\"\r\n                                    d=\"M 25,45 35,55 60,30\"/>\r\n                                </svg>\r\n                                <button className=\"Modal-cancel\" onClick={this.handleClear}>Close</button>\r\n                            </div>\r\n                        </div> :\r\n                        <div className=\"Modal\">\r\n                            <div className=\"Modal-text\">\r\n                        {`You are about to transfer\r\n                        NGN ${this.props.amount}\r\n                        from Fundr\r\n                        to ${this.props.recipient.name}\r\n                        of ${this.props.recipient.bank}`}\r\n                    </div>\r\n                    <form className=\"Modal-form\">\r\n                        <label htmlFor=\"otp\">Enter OTP</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        id=\"otp\"\r\n                        name=\"otp\"\r\n                        value={this.state.otp}\r\n                        placeholder=\"Enter OTP\"\r\n                        onChange={this.handleChange}\r\n                        required\r\n                        />\r\n                        <div className=\"Modal-buttons\">\r\n                            <button id=\"Modal-cancel\" onClick={this.handleClose}>Cancel</button>\r\n                            <button onClick={this.handleSubmit}>Done</button>\r\n                        </div>\r\n                    </form>\r\n                        </div>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransferModal;","/**\r\n * This component handles a direct transfer being made to a recipient\r\n * who has already been registered.\r\n */\r\n\r\n// Imports\r\nimport React, { Component } from 'react'\r\nimport axios from \"axios\"\r\nimport \"./DirectForm.css\"\r\n\r\n/**\r\n * create instance of axios library with authentication\r\n */\r\nlet axios_pay = axios.create({\r\n    baseURL: \"https://api.paystack.co\",\r\n    headers: {\"Authorization\": `Bearer ${process.env.SECRET_API}`}\r\n})\r\n\r\n// Component class\r\nclass DirectForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        /**\r\n         * Initial state set and all methods used are bound\r\n         */\r\n        this.state = {recipients:[], recipient:{}, recipientCode:\"\", amount:\"\", reason:\"\", defaultSelect:\"Select a Recipient\"}\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.handleAmount = this.handleAmount.bind(this);\r\n        this.handleReason = this.handleReason.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    /**\r\n     * When component mounts,\r\n     * retrieve all the previously stored recipients\r\n     */\r\n    componentDidMount(){\r\n        axios_pay.get(\"/transferrecipient\").then(res => {\r\n            let allRecipients = res.data.data\r\n            this.setState({recipients: allRecipients});\r\n        })\r\n    }\r\n    /**\r\n     * This handles the selection of a recipient,\r\n     * it also stores all the recipient's details in an object for use\r\n     */\r\n    handleSelect(evt){\r\n        this.setState({recipientCode: evt.target.value}, ()=>{\r\n            if(this.state.recipientCode){\r\n                let selectedRecipient = [this.state.recipients.filter(recipient => recipient.recipient_code === this.state.recipientCode)[0]][0]\r\n                this.setState(st => ({\r\n                    recipient: {recipientCode: selectedRecipient.recipient_code,\r\n                                name: selectedRecipient.name,\r\n                                bank: selectedRecipient.details.bank_name,\r\n                                bank_code: selectedRecipient.details.bank_code,\r\n                                accountNumber: selectedRecipient.details.account_number\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * Update Amount and Reason for Transfer\r\n     * \r\n     */\r\n    handleAmount(evt){\r\n        this.setState({amount: evt.target.value})\r\n    }\r\n    handleReason(evt){\r\n        this.setState({reason: evt.target.value})\r\n    }\r\n    /**\r\n     * This handles the the submit button,\r\n     * all the details retrieved from the form\r\n     *  are sent to the Parent Component \r\n     */\r\n    handleSubmit(evt){\r\n        evt.preventDefault()\r\n        this.props.update(this.state.amount, this.state.recipient, this.state.reason)\r\n    }\r\n\r\n    /**\r\n     * Renders <DirectForm />\r\n     */\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit} className=\"DirectForm\">\r\n                <div>\r\n                    <label htmlFor=\"Recipient\">Transfer To</label>\r\n                    <select value={this.state.recipientCode} onChange={this.handleSelect}>\r\n                        <option disabled value=\"\">Select a Recipient</option>\r\n                        {this.state.recipients.map(recipient => <option key={recipient.id} value={recipient.recipient_code}>{recipient.name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"accountNo\">Account No</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"accountNo\"\r\n                            id=\"accountNo\"\r\n                            defaultValue={this.state.recipient.accountNumber}\r\n                            disabled\r\n                            required\r\n                        />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"bank\">Bank</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"bank\"\r\n                            id=\"bank\"\r\n                            defaultValue={this.state.recipient.bank}\r\n                            disabled\r\n                            required\r\n                        />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"amount\">Amount</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"amount\"\r\n                        id=\"amount\"\r\n                        value={this.state.amount}\r\n                        onChange={this.handleAmount}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"reason\">Description</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"reason\"\r\n                        name=\"reason\"\r\n                        value={this.state.reason}\r\n                        onChange={this.handleReason}\r\n                        required\r\n                        maxLength={30}\r\n                    />\r\n                </div>\r\n                <div id=\"DirectForm-button\">\r\n                    <button>Continue</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default DirectForm;","/**\r\n * This Parent Component handles all transfers.\r\n */\r\n\r\n // Imports\r\nimport React, { Component } from 'react'\r\nimport axios from \"axios\";\r\nimport TransferForm from \"./TransferForm\";\r\nimport TransferModal from \"./TransferModal\";\r\nimport DirectForm from \"./DirectForm\";\r\nimport \"./Fundr.css\"\r\n\r\n/**\r\n * create instance of axios library with authentication\r\n */\r\nlet axios_pay = axios.create({\r\n    baseURL: \"https://api.paystack.co\",\r\n    headers: {\"Authorization\": `Bearer ${process.env.SECRET_API}`}\r\n})\r\n\r\n// Component class\r\nclass Fundr extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        /**\r\n         * Initial state set and all methods used are bound\r\n         */\r\n        this.state={amount:\"\", recipient:{}, directTransfer:true, isTransferring:false, transferCode:\"\", success:false}\r\n        this.createRecipient = this.createRecipient.bind(this);\r\n        this.initiateTransfer = this.initiateTransfer.bind(this);\r\n        this.handleDirectTransfer = this.handleDirectTransfer.bind(this);\r\n        this.handleNewTransfer = this.handleNewTransfer.bind(this);\r\n        this.finalizeTransfer = this.finalizeTransfer.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.updateFundr = this.updateFundr.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This method uses the Paystack API to create a recipient based on\r\n     * the details being passed from <TransferForm /> component.\r\n     * It also initiates a transfer once recipient has been created\r\n     */\r\n    createRecipient(bankCode, accountName, accountNumber, amount, reason){\r\n        axios_pay.post(\"/transferrecipient\", {\r\n            type: accountNumber,\r\n            name: accountName,\r\n            account_number: accountNumber,\r\n            bank_code: bankCode\r\n        }).then(res => {\r\n            if(res.status === 200 || res.status === 201){\r\n                let data = res.data.data\r\n                this.setState({\r\n                    recipient: \r\n                        {recipientCode: data.recipient_code, \r\n                        name: data.name, \r\n                        bank: data.details.bank_name, \r\n                        bank_code: data.details.bank_code},\r\n                    amount: amount\r\n                }, this.initiateTransfer(amount, reason, data.recipient_code))\r\n            }\r\n        }).catch(err => {\r\n            alert(err);\r\n        })\r\n    }\r\n    /**\r\n     * This method updates the state with the details being passed from <DirectForm /> component.\r\n     * It also initiates a transfer \r\n     */\r\n    updateFundr(amount, recipient, reason){\r\n        this.setState({\r\n            amount:amount,\r\n            reason: reason,\r\n            recipient: recipient\r\n        }, this.initiateTransfer(amount, reason, recipient.recipientCode))\r\n    }\r\n\r\n    /**\r\n     * This method initiates a transfer based on the amount, reason and recipient code\r\n     * It uses the Paystack Initiate Transfer endpoint\r\n     * It updates the state with the transferCode returned. \r\n     */\r\n    initiateTransfer(amount, reason, rc_code){\r\n        axios_pay.post(\"/transfer\", {\r\n            source: \"balance\",\r\n            amount: amount * 100,\r\n            reason: reason,\r\n            recipient: rc_code\r\n        }).then(res => {\r\n            let tf_code = res.data.data.transfer_code\r\n            this.setState(st => ({\r\n                isTransferring:true,\r\n                transferCode: tf_code\r\n            }))\r\n        })\r\n    }\r\n    /**\r\n     * This method finalizes a transfer with the help of the Paystack\r\n     * Finalize Transfer endpoint. It uses the otp retrieved from the\r\n     * <TransferModal /> and the transfer code already in the state.\r\n     * \r\n     */\r\n    finalizeTransfer(otp){\r\n        axios_pay.post(\"/transfer/finalize_transfer\", {\r\n            transfer_code: this.state.transferCode,\r\n            otp:otp\r\n        }).then(res => {\r\n            if(res.status === 200){\r\n                this.setState({success: true}, ()=>{\r\n                    this.setState({\r\n                        amount:\"\",\r\n                        recipient:\"\",\r\n                        transferCode:\"\"\r\n                    })\r\n                })\r\n            }\r\n        }).catch(err => {\r\n            alert(err);\r\n            this.closeModal();\r\n        })\r\n    }\r\n    /**\r\n     * This method restores the <Fundr /> component state to its initial values;\r\n     */\r\n    clear(){\r\n        if (this.state.directTransfer) {\r\n            this.handleDirectTransfer();\r\n        } else {\r\n            this.handleNewTransfer();\r\n        }\r\n    }\r\n    handleDirectTransfer(){\r\n        this.setState({\r\n            directTransfer: true,\r\n            amount:\"\",\r\n            recipient:\"\",\r\n            isTransferring: false,\r\n            transferCode:\"\",\r\n            success:false\r\n        })\r\n    }\r\n    handleNewTransfer(){\r\n        this.setState({\r\n            directTransfer: false,\r\n            amount:\"\",\r\n            recipient:\"\",\r\n            isTransferring: false,\r\n            transferCode:\"\",\r\n            success:false\r\n        })\r\n    }\r\n    /**\r\n     * This removes the <TransferModal /> component from the view\r\n     */\r\n    closeModal(){\r\n        this.setState({isTransferring:false})\r\n    }\r\n\r\n    /**\r\n     * Renders <Fundr />\r\n     */\r\n    render(){\r\n        return(\r\n            <div className=\"Fundr\">\r\n                <div className=\"Fundr-sidebar\">\r\n                    <i className=\"fas fa-infinity\"></i>\r\n                    <h1 className=\"Fundr-sidebar-title\">Fund<span>r</span></h1>\r\n                </div>\r\n                <div className=\"Fundr-main\">\r\n                    <div className=\"Fundr-main-switch\">\r\n                        <button style={(this.state.directTransfer) ? {backgroundColor:\"#0c243b\", color:\"white\"}: null} onClick={this.handleDirectTransfer}>Direct</button>\r\n                        <button style={(!this.state.directTransfer) ? {backgroundColor:\"#0c243b\", color:\"white\"}: null} onClick={this.handleNewTransfer}>New Transfer</button>\r\n                    </div>\r\n                    <div>\r\n                        {(this.state.directTransfer) ? <DirectForm update={this.updateFundr} initiateTransfer={this.initiateTransfer}></DirectForm> : <TransferForm createRecipient={this.createRecipient} />}\r\n                    </div>\r\n                    {(this.state.isTransferring) ? <TransferModal \r\n                                                amount={this.state.amount} \r\n                                                recipient={this.state.recipient}\r\n                                                closeModal={this.closeModal}\r\n                                                clear={this.clear}\r\n                                                finalizeTransfer={this.finalizeTransfer}\r\n                                                success={this.state.success}\r\n                                                >\r\n                                                \r\n                                                </TransferModal> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fundr;","import React from 'react';\nimport Fundr from \"./Fundr\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Fundr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}